import datetime
import json
import os
import time
from datetime import timedelta, timezone
from threading import Thread

import database_files.database_cities as dbcities
import database_files.database_notifications as dbnotif
import database_files.database_settings as dbsettings

from dotenv import load_dotenv

import requests

import schedule

import telebot
from telebot import types


load_dotenv()
bot = telebot.TeleBot(os.getenv('API_TELEGRAMBOT'))
API_weather = os.getenv('API_OPENWEATHERMAP')


markup_start = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
    types.KeyboardButton("üåû –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É"),
    types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
)

markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(
    types.KeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
    types.KeyboardButton("üå¶Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≥–æ–¥—ã"),
    types.KeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥–∞"),
    types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
)

markup_settings_cities = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(
    types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"),
    types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥"),
    types.KeyboardButton("–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤"),
    types.KeyboardButton("‚Ü©Ô∏è –ùa–∑–∞–¥")
)


def buttons_weather_parameters(list_settings):
    dictionary_weather_parameters_panel = {
        0: "‚ùå",
        1: "‚úîÔ∏è"
    }

    markup_weather_parameters = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {dictionary_weather_parameters_panel.get(list_settings[0])}", callback_data="weather_parameters01"),
        types.InlineKeyboardButton(f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ {dictionary_weather_parameters_panel.get(list_settings[1])}", callback_data="weather_parameters02"),
        types.InlineKeyboardButton(f"–î–∞–≤–ª–µ–Ω–∏–µ {dictionary_weather_parameters_panel.get(list_settings[2])}", callback_data="weather_parameters03"),
        types.InlineKeyboardButton(f"–í–µ—Ç–µ—Ä {dictionary_weather_parameters_panel.get(list_settings[3])}", callback_data="weather_parameters04"),
        types.InlineKeyboardButton(f"–í–ª–∞–∂–Ω–æ—Å—Ç—å {dictionary_weather_parameters_panel.get(list_settings[4])}", callback_data="weather_parameters05"),
        types.InlineKeyboardButton(f"–û–±–ª–∞—á–Ω–æ—Å—Ç—å {dictionary_weather_parameters_panel.get(list_settings[5])}", callback_data="weather_parameters06"),
        types.InlineKeyboardButton(f"–í–∏–¥–∏–º–æ—Å—Ç—å {dictionary_weather_parameters_panel.get(list_settings[6])}", callback_data="weather_parameters07"),
        types.InlineKeyboardButton(f"–í–æ—Å—Ö–æ–¥/–∑–∞–∫–∞—Ç {dictionary_weather_parameters_panel.get(list_settings[7])}", callback_data="weather_parameters08"),
        types.InlineKeyboardButton(f"–ú–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è {dictionary_weather_parameters_panel.get(list_settings[8])}", callback_data="weather_parameters09"),
        types.InlineKeyboardButton(f"UTC {dictionary_weather_parameters_panel.get(list_settings[9])}", callback_data="weather_parameters10"),
        types.InlineKeyboardButton(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {dictionary_weather_parameters_panel.get(list_settings[10])}", callback_data="weather_parameters11")
    )

    return markup_weather_parameters


def buttons_days_notifications(callback):
    dictionary_days_week = {
        0: "‚ùå",
        1: "‚úîÔ∏è"
    }

    click_status = dbnotif.get_day_click_status(callback.from_user.id)
    markup_get_days_notifications = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(f"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ {dictionary_days_week.get(click_status[0])}", callback_data="notif|week_panel|day_01"),
        types.InlineKeyboardButton(f"–í—Ç–æ—Ä–Ω–∏–∫ {dictionary_days_week.get(click_status[1])}", callback_data="notif|week_panel|day_02")
    )

    markup_get_days_notifications.add(
        types.InlineKeyboardButton(f"–°—Ä–µ–¥–∞ {dictionary_days_week.get(click_status[2])}", callback_data="notif|week_panel|day_03"),
        types.InlineKeyboardButton(f"–ß–µ—Ç–≤–µ—Ä–≥ {dictionary_days_week.get(click_status[3])}", callback_data="notif|week_panel|day_04"),
        types.InlineKeyboardButton(f"–ü—è—Ç–Ω–∏—Ü–∞ {dictionary_days_week.get(click_status[4])}", callback_data="notif|week_panel|day_05")
    )

    markup_get_days_notifications.add(
        types.InlineKeyboardButton(f"–°—É–±–±–æ—Ç–∞ {dictionary_days_week.get(click_status[5])}", callback_data="notif|week_panel|day_06"),
        types.InlineKeyboardButton(f"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {dictionary_days_week.get(click_status[6])}", callback_data="notif|week_panel|day_07")
    )

    markup_get_days_notifications.add(types.InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="notif|accept_panel|accept"))
    markup_get_days_notifications.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="notif|back_panel|back_02"))

    return markup_get_days_notifications


def buttons_notifications_panel(user_id):
    markup_notifications = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if dbnotif.get_bool_dispatch_time_utc(user_id) is False:
        markup_notifications.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"))

    else:
        if dbnotif.get_status_notifications(user_id) == 1:
            button01_notifications = types.KeyboardButton("–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        else:
            button01_notifications = types.KeyboardButton("–í–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        markup_notifications.add(button01_notifications, types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"))
        markup_notifications.add(types.KeyboardButton("–ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), types.KeyboardButton("‚Ü©Ô∏è –ùa–∑–∞–¥"))
        return markup_notifications

    markup_notifications.add(types.KeyboardButton("‚Ü©Ô∏è –ùa–∑–∞–¥"))
    return markup_notifications


def get_number_value(value):
    """
    –£–∑–Ω–∞—Ç—å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ –∏–ª–∏ –¥–≤—É–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∫–æ–Ω—Ü–µ callback_data
    """

    return value[-1:] if value[0] == "0" else value[-2:]


def list_sities_handler(message):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ç–µ–∂–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –¥–ª—è –∑–∞–º–µ–Ω—ã –≥–æ—Ä–æ–¥–æ–≤ —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º None –Ω–∞ ""
    """

    list_sities_database = list(dbcities.list_cities(message.from_user.id))
    list_sities_database = [item if item is not None else "" for item in list_sities_database]
    return list_sities_database


def list_sities_handler_client(message):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ç–µ–∂–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """

    list_sities_database = dbcities.list_cities(message.from_user.id)
    final_list = [item for item in list_sities_database if item is not None]
    return "\n".join(final_list)


def list_value_notifications(user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –≥–æ—Ä–æ–¥, –¥–Ω–∏, –≤—Ä–µ–º—è
    """

    dictionary_days_week = {
        0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–≤—Ç–æ—Ä–Ω–∏–∫",
        2: "—Å—Ä–µ–¥—É",
        3: "—á–µ—Ç–≤–µ—Ä–≥",
        4: "–ø—è—Ç–Ω–∏—Ü—É",
        5: "—Å—É–±–±–æ—Ç—É",
        6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    all_days = dbnotif.get_day_click_status(user_id)
    if all_days.count(1) == 7:
        selected_days = " –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
    elif all_days.count(1) == 0:
        selected_days = ""
    else:
        indices = [index for index, item in enumerate(all_days) if item == 1]  # –∏–Ω–¥–µ–∫—Å—ã –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if indices == [0, 1, 2, 3, 4]:
            selected_days = " –ø–æ –±—É–¥–Ω—è–º"
        elif indices == [5, 6]:
            selected_days = " –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º"
        else:
            list_selected_days = []
            for element in indices:
                list_selected_days.append(dictionary_days_week.get(element))
            selected_days = f" –Ω–∞ {', '.join(list_selected_days)}"

    city_name = dbnotif.get_city(user_id)
    time_utc = dbnotif.get_dispatch_time_utc(user_id)
    time_utc = f"{time_utc[:2]}:{time_utc[2:]}"

    return city_name, time_utc, selected_days


@bot.message_handler(commands=['start'])
def start_panel(message):
    def check_user_last_name(message):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–º–∏–ª–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return "" if message.from_user.last_name is None else f" {message.from_user.last_name}"

    dbcities.check_id(message.from_user.id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    dbsettings.check_id(message.from_user.id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    dbnotif.check_id(message.from_user.id, message.chat.id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    bot.send_message(message.chat.id, f"""–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}{check_user_last_name(message)}. \
–Ø <b>Bot Weather</b>, –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.""", reply_markup=markup_start, parse_mode="html")


@bot.message_handler(regexp="üåû –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
def find_weather(message):
    if dbcities.check_missing_cities(message.from_user.id) is False:
        if dbcities.get_number_of_cities(message.from_user.id) == 1:  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–∏–Ω –≥–æ—Ä–æ–¥
            city_name = list_sities_handler_client(message)
            get_weather(message.from_user.id, None, message.chat.id, city_name)
        else:
            erlst = list_sities_handler(message)
            markup_settings_find_weather = types.InlineKeyboardMarkup(row_width=1).add(
                types.InlineKeyboardButton(erlst[0], callback_data="find_weather_city01"),
                types.InlineKeyboardButton(erlst[1], callback_data="find_weather_city02"),
                types.InlineKeyboardButton(erlst[2], callback_data="find_weather_city03"),
                types.InlineKeyboardButton(erlst[3], callback_data="find_weather_city04"),
                types.InlineKeyboardButton(erlst[4], callback_data="find_weather_city05")
            )
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup_settings_find_weather)
    else:
        bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ <b>—É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥</b> –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ì–æ—Ä–æ–¥–∞ ‚Üí –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥. –í—Å–µ–≥–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ 5 –≥–æ—Ä–æ–¥–æ–≤",
                         parse_mode="html")


def get_weather(user_id, message_id, chat_id, city_name, call_type="message"):
    """
    –í—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """

    weather_fromsite = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={API_weather}&lang=ru&units=metric')
    weather_answer = json.loads(weather_fromsite.text)

    list_settings = dbsettings.get_list_settings(user_id)
    one_option_selected = [item for item in list_settings if item == 1]

    if one_option_selected:
        if list_settings[0]:
            temperature = f"\n{int(weather_answer['main']['temp'])}¬∞C  –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {int(weather_answer['main']['feels_like'])}¬∞C"
        else:
            temperature = ""

        if list_settings[1]:
            weather_description = f"\n{weather_answer['weather'][0]['description'].title()}"
        else:
            weather_description = ""

        if list_settings[2]:
            pressure_celsius = int(float(weather_answer["main"]["pressure"]) * 0.750063755419211)
            pressure = f"\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure_celsius} –º–º —Ä—Ç. —Å—Ç."
        else:
            pressure = ""

        if list_settings[3]:
            wind_speed = f"\n–í–µ—Ç–µ—Ä: {weather_answer['wind']['speed']} –º–µ—Ç—Ä/—Å–µ–∫"
        else:
            wind_speed = ""

        if list_settings[4]:
            humidity = f"\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_answer['main']['humidity']}%"
        else:
            humidity = ""

        if list_settings[5]:
            cloudy = f"\n–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {weather_answer['clouds']['all']}%"
        else:
            cloudy = ""

        if list_settings[6]:
            visibility = f"\n–í–∏–¥–∏–º–æ—Å—Ç—å: {weather_answer['visibility']} –º"
        else:
            visibility = ""

        if list_settings[7]:
            sunrise = datetime.datetime.fromtimestamp(weather_answer['sys']['sunrise']).strftime('%H:%M')
            sunset = datetime.datetime.fromtimestamp(weather_answer['sys']['sunset']).strftime('%H:%M')
            sunrise_sunset = f"\n–í–æ—Å—Ö–æ–¥: {sunrise} –ó–∞–∫–∞—Ç: {sunset}"
        else:
            sunrise_sunset = ""

        if list_settings[8]:
            times = datetime.datetime.fromtimestamp(time.time() + weather_answer['timezone'], datetime.UTC).strftime("%H:%M")
            utc_time = f" {times}"
        else:
            utc_time = ""

        if list_settings[9]:
            utc = f" {timezone(timedelta(seconds=weather_answer['timezone']))}"
        else:
            utc = ""

        if list_settings[10]:
            image = '<a href="https://i.ibb.co/LdpmHR0/photo-2023-10-28-19-33-08.jpg">&#8205;</a>'
        else:
            image = ""

        comma = "," if utc else ""

        weather_text = f"""{city_name}{utc_time}{comma}{utc}\
        \n\n<b>–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞</b>{image}{temperature}{weather_description}{pressure}{wind_speed}{humidity}{cloudy}{visibility}{sunrise_sunset}"""

        if call_type == "message":
            bot.send_message(chat_id, weather_text, parse_mode="html", disable_web_page_preview=False)
        else:
            bot.edit_message_text(weather_text, chat_id, message_id, parse_mode="html", disable_web_page_preview=False)

    else:
        if call_type == "message":
            bot.send_message(chat_id, "–í—ã <b>–æ—Ç–∫–ª—é—á–∏–ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b> –≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã —è –º–æ–≥ –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                             parse_mode="html")
        else:
            bot.edit_message_text("–í—ã <b>–æ—Ç–∫–ª—é—á–∏–ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–≤–æ–¥–∞</b> –ø–æ–≥–æ–¥—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã —è –º–æ–≥ –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                                  chat_id, message_id, parse_mode="html")


@bot.message_handler(regexp="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings_panel(message):
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=markup_settings)


@bot.message_handler(regexp="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
def notifications_panel(message):
    bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", reply_markup=buttons_notifications_panel(message.from_user.id))


@bot.message_handler(regexp="–î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
def add_notifications_panel(message, call_type="message"):
    erlst = list_sities_handler(message)
    markup_cities_notifications = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton(erlst[0], callback_data=f"notif|city_panel|{erlst[0]}"),
        types.InlineKeyboardButton(erlst[1], callback_data=f"notif|city_panel|{erlst[1]}"),
        types.InlineKeyboardButton(erlst[2], callback_data=f"notif|city_panel|{erlst[2]}"),
        types.InlineKeyboardButton(erlst[3], callback_data=f"notif|city_panel|{erlst[3]}"),
        types.InlineKeyboardButton(erlst[4], callback_data=f"notif|city_panel|{erlst[4]}")
    )

    if dbcities.get_number_of_cities(message.from_user.id) == 0:
        text = "–î–ª—è –Ω–∞—á–∞–ª–∞ <b>—É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥</b> –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ì–æ—Ä–æ–¥–∞ ‚Üí –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥. –í—Å–µ–≥–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ 5 –≥–æ—Ä–æ–¥–æ–≤"
    else:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"

    if call_type == "message":
        bot.send_message(message.chat.id, text, reply_markup=markup_cities_notifications, parse_mode="html")
    else:
        bot.edit_message_text(text, message.message.chat.id, message.message.message_id,
                              reply_markup=markup_cities_notifications, parse_mode="html")


def get_days_notification(callback):
    markup_get_type_notifications = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="notif|days_panel|every_day"),
        types.InlineKeyboardButton("–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="notif|days_panel|select_days_week"),
        types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="notif|back_panel|back_01")
    )

    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback.message.chat.id, callback.message.message_id,
                          reply_markup=markup_get_type_notifications)


def select_days_week(callback):
    try:  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback.message.chat.id,
                              callback.message.message_id, reply_markup=buttons_days_notifications(callback))
    except BaseException as e:
        print(e)


def get_time_clock_notification(callback):
    markup_time_clock_panel = types.InlineKeyboardMarkup(row_width=4)
    list_buttons = []
    for i in range(0, 24):
        number = str(i).zfill(2)
        list_buttons.append(types.InlineKeyboardButton(f"{number}:00", callback_data=f"notif|time_clock_panel|time_{number}"))
    markup_time_clock_panel.add(*list_buttons)
    markup_time_clock_panel.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="notif|back_panel|back_03"))

    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ <b>UTC –í–†–ï–ú–Ø</b>, –≤–æ —Å–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                          callback.message.chat.id, callback.message.message_id, reply_markup=markup_time_clock_panel, parse_mode="html")


def get_time_minutes_notification(callback, clock):
    markup_time_minutes_panel = types.InlineKeyboardMarkup(row_width=4)
    list_buttons = []
    for i in range(0, 60):
        number = str(i).zfill(2)
        list_buttons.append(types.InlineKeyboardButton(f"{clock}:{number}", callback_data=f"notif|time_minutes_panel|time_{clock}{number}"))
    markup_time_minutes_panel.add(*list_buttons)
    markup_time_minutes_panel.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="notif|back_panel|back_04"))

    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ <b>UTC –í–†–ï–ú–Ø</b>, –≤–æ —Å–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                          callback.message.chat.id, callback.message.message_id, reply_markup=markup_time_minutes_panel, parse_mode="html")


def end_notification(callback):
    city_name, time_utc, selected_days = list_value_notifications(callback.from_user.id)
    bot.edit_message_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{city_name}</b>{selected_days} –≤ <b>{time_utc}</b> –ø–æ UTC",
                          callback.message.chat.id, callback.message.message_id, parse_mode="html")
    bot.send_sticker(callback.message.chat.id, "CAACAgIAAxkBAAELYKZlyOpKYx8hfAyS79Y5kTWx3I0quwAC4zQAAj-6IUu1IkFRj3IQ6zQE",
                     reply_markup=buttons_notifications_panel(callback.from_user.id))


@bot.message_handler(regexp="–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
def off_notifications_panel(message):
    dbnotif.change_status_notifications(message.from_user.id, 0)
    bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ", reply_markup=buttons_notifications_panel(message.from_user.id))


@bot.message_handler(regexp="–í–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
def on_notifications_panel(message):
    dbnotif.change_status_notifications(message.from_user.id, 1)
    bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", reply_markup=buttons_notifications_panel(message.from_user.id))


@bot.message_handler(regexp="–£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
def delete_notification_panel(message):
    dbnotif.delete_notification(message.from_user.id)
    bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", reply_markup=buttons_notifications_panel(message.from_user.id))


@bot.message_handler(regexp="–ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
def list_notification_panel(message):
    dictionary_status_notifications = {
        0: "–≤—ã–∫–ª—é—á–µ–Ω–æ",
        1: "–≤–∫–ª—é—á–µ–Ω–æ"
    }
    status_notifications = dictionary_status_notifications.get(dbnotif.get_status_notifications(message.from_user.id))

    city_name, time_utc, selected_days = list_value_notifications(message.from_user.id)

    text = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{city_name}</b>{selected_days} –≤ <b>{time_utc}</b> –ø–æ UTC.\
    \n\n–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{status_notifications}</b>"

    bot.send_message(message.chat.id, text, parse_mode="html")


@bot.message_handler(regexp="üèôÔ∏è –ì–æ—Ä–æ–¥–∞")
def cities_panel(message):
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ–¥–æ–≤", reply_markup=markup_settings_cities)


@bot.message_handler(regexp="üå¶Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≥–æ–¥—ã")
def weather_parameters_panel(message):
    list_settings = dbsettings.get_list_settings(message.from_user.id)
    markup_weather_parameters = buttons_weather_parameters(list_settings)
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:", reply_markup=markup_weather_parameters)


def changing_weather_parameters(callback, index):
    """
    –ú–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≥–æ–¥—ã)
    """

    dbsettings.change_parameter(callback.from_user.id, int(get_number_value(index)))
    list_settings = dbsettings.get_list_settings(callback.from_user.id)
    markup_weather_parameters = buttons_weather_parameters(list_settings)

    try:  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ
        bot.edit_message_text("–°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:", callback.message.chat.id, callback.message.message_id,
                              reply_markup=markup_weather_parameters)
    except BaseException as e:
        print(e)


@bot.message_handler(regexp="‚Ü©Ô∏è –ù–∞–∑–∞–¥")  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–Ω–æ–µ –º–µ–Ω—é
def return_start_panel(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup_start)


@bot.message_handler(regexp="‚Ü©Ô∏è –ùa–∑–∞–¥")  # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
def return_settings_panel(message):
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=markup_settings)


@bot.message_handler(regexp="–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥")
def delete_cities_panel(message):
    if dbcities.check_missing_cities(message.from_user.id) is False:
        erlst = list_sities_handler(message)
        markup_settings_cities_delete = types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton(erlst[0], callback_data="delete_city01"),
            types.InlineKeyboardButton(erlst[1], callback_data="delete_city02"),
            types.InlineKeyboardButton(erlst[2], callback_data="delete_city03"),
            types.InlineKeyboardButton(erlst[3], callback_data="delete_city04"),
            types.InlineKeyboardButton(erlst[4], callback_data="delete_city05")
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=markup_settings_cities_delete)
    else:
        bot.send_message(message.chat.id, """<b>–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç</b>\
            \n\n–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥'""", parse_mode="html")


def delete_city_database(callback, city_name):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    if city_name != "Error_delete":  # Error_delete –∑–Ω–∞—á–∏—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω (—è—á–µ–π–∫–∞ —Å –≥–æ—Ä–æ–¥–æ–º –ø—É—Å—Ç–∞)
        bot.edit_message_text(f"–ì–æ—Ä–æ–¥ {city_name} <b>—É–¥–∞–ª–µ–Ω</b> –∏–∑ —Å–ø–∏—Å–∫–∞", callback.message.chat.id,
                              callback.message.message_id, parse_mode="html")
    else:
        bot.edit_message_text("–î–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ", callback.message.chat.id, callback.message.message_id)


@bot.message_handler(regexp="–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤")
def list_cities_panel(message):
    if dbcities.check_missing_cities(message.from_user.id) is False:
        bot.send_message(message.chat.id, f"<b>–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:</b>\n\n{list_sities_handler_client(message)}", parse_mode="html")
    else:
        bot.send_message(message.chat.id, "<b>–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç</b>\n\n–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã '–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥'", parse_mode="html")


@bot.message_handler(regexp="–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥")
def add_cities_panel(message):
    if dbcities.check_max_numbers(message.from_user.id) is False:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        bot.register_next_step_handler(message, add_city_handler)
    else:
        bot.send_message(message.chat.id, f"""–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã <b>–¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞</b> –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞—Ä—ã—Ö.\
            \n\n<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:</b>\n\n{list_sities_handler_client(message)}""", reply_markup=markup_settings_cities, parse_mode="html")


def add_city_handler(message):
    """
    –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞, –¥–æ –≤–Ω–µ—Å–µ–Ω–∏—è –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    """

    list_commands_add_cities_panel = (
        "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥",
        "–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥",
        "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤",
        "/start",
        "‚Ü©Ô∏è –Ωa–∑–∞–¥"
    )

    message_from_user = message.text.strip().capitalize()
    weather_fromsite = requests.get(f"""https://api.openweathermap.org/data/2.5/weather?q={message_from_user}&appid={API_weather}&lang=ru&units=metric""")
    weather_answer = json.loads(weather_fromsite.text)

    if weather_fromsite.status_code == 200:  # –°—Ç–∞—Ç—É—Å 200 = —Å–∞–π—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥
        city_name = weather_answer['name']
        if dbcities.check_duplicate(message.from_user.id, city_name) is False:
            dbcities.add_city(message.from_user.id, city_name)
            bot.send_message(message.chat.id, f"–ì–æ—Ä–æ–¥ {city_name} <b>–¥–æ–±–∞–≤–ª–µ–Ω</b> –≤ —Å–ø–∏—Å–æ–∫", reply_markup=markup_settings_cities, parse_mode="html")
        else:
            bot.send_message(message.chat.id,
                             f"–î–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.\n\n<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:</b>\n\n{list_sities_handler_client(message)}",
                             reply_markup=markup_settings_cities, parse_mode="html")

    elif message_from_user in list_commands_add_cities_panel:
        if message_from_user == "‚Ü©Ô∏è –Ωa–∑–∞–¥":
            return_settings_panel(message)
        elif message_from_user == "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥":
            add_cities_panel(message)
        elif message_from_user == "–£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥":
            delete_cities_panel(message)
        elif message_from_user == "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≥–æ—Ä–æ–¥–æ–≤":
            list_cities_panel(message)
        elif message_from_user == "/start":
            start_panel(message)

    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –∑–Ω–∞—é", reply_markup=markup_settings_cities)


@bot.message_handler(content_types=['text'])
def other_regexp(message):
    bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start", reply_markup=markup_start)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    index = callback.data
    if index.startswith("delete"):
        dictionary_delete_callback = {
            "delete_city01": 1,
            "delete_city02": 2,
            "delete_city03": 3,
            "delete_city04": 4,
            "delete_city05": 5
        }
        city_name = dbcities.delete_city(callback.from_user.id, dictionary_delete_callback.get(index))
        delete_city_database(callback, city_name)

    elif index.startswith("find"):
        dictionary_find_weather_callback = {
            "find_weather_city01": 0,
            "find_weather_city02": 1,
            "find_weather_city03": 2,
            "find_weather_city04": 3,
            "find_weather_city05": 4
        }
        city_name = dbcities.list_cities(callback.from_user.id)[dictionary_find_weather_callback.get(index)]
        get_weather(callback.from_user.id, callback.message.message_id, callback.message.chat.id, city_name, "callback")

    elif index.startswith("weather"):
        changing_weather_parameters(callback, index)

    elif index.startswith("notif"):
        subsection = index.split("|")[1]
        ending = index.split("|")[2]

        if subsection == "city_panel":
            dbnotif.add_city(callback.from_user.id, ending)
            get_days_notification(callback)

        elif subsection == "days_panel":
            if ending == "every_day":
                dbnotif.change_all_days(callback.from_user.id, 1)
                get_time_clock_notification(callback)
            elif ending == "select_days_week":
                select_days_week(callback)

        elif subsection == "accept_panel":
            if dbnotif.get_day_click_status(callback.from_user.id).count(1) == 0:
                bot.answer_callback_query(callback.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å')
            else:
                get_time_clock_notification(callback)

        elif subsection == "back_panel":
            if ending == "back_01":
                add_notifications_panel(callback, "callback")
            elif ending == "back_02":
                get_days_notification(callback)
            elif ending == "back_03":
                get_days_notification(callback)
            elif ending == "back_04":
                get_time_clock_notification(callback)

        elif subsection == "week_panel":
            dictionary_day_week = {
                1: "Monday",
                2: "Tuesday",
                3: "Wednesday",
                4: "Thursday",
                5: "Friday",
                6: "Saturday",
                7: "Sunday"
            }

            dbnotif.add_selected_day(callback.from_user.id, dictionary_day_week.get(int(ending[-1])))
            select_days_week(callback)

        elif subsection == "time_clock_panel":
            get_time_minutes_notification(callback, ending[-2:])

        elif subsection == "time_minutes_panel":
            dbnotif.add_dispatch_time_utc(callback.from_user.id, ending[-4:])
            end_notification(callback)


def schedule_job():
    '''
    –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    '''

    notifications = dbnotif.get_notifications()
    for element in notifications:
        if element[2] == datetime.datetime.fromtimestamp(time.time(), datetime.UTC).strftime("%H%M"):
            get_weather(user_id=element[0], chat_id=element[1], message_id=None, city_name=element[3])


def schedule_start_job():
    """
    –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ schedule_job –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ :00
    """

    schedule.every().minute.at(":00").do(schedule_job)
    while True:
        schedule.run_pending()
        time.sleep(1)


Thread(target=schedule_start_job).start()


while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        time.sleep(10)
